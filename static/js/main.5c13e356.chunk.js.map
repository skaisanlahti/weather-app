{"version":3,"sources":["components/Weather.js","components/Search.js","components/History.js","App.js","reportWebVitals.js","index.js"],"names":["Weather","props","data","elements","units","name","push","undefined","main","temp","toFixed","weather","description","clouds","all","wind","speed","sys","sunrise","timeStr","Date","toLocaleTimeString","sunset","buildDisplay","className","SearchError","searchError","Search","onSubmit","handleSubmit","placeholder","type","value","searchTerm","onChange","handleChange","defaultChecked","History","history","length","map","location","onClick","handleHistoryClick","App","useState","setSearchTerm","setSearchError","searchUnits","setSearchUnits","setHistory","setUnits","setData","fetchWeatherData","city","a","fetch","process","mode","response","json","cod","updateHistory","console","log","newLocation","newHistory","includes","splice","historySize","unshift","saveHistory","localStorage","setItem","JSON","stringify","useEffect","getItem","localHistory","parse","loadHistory","event","target","preventDefault","innerText","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5c13e356.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Weather(props) {\r\n  const buildDisplay = (data, units) => {\r\n    let elements = [];\r\n    // main fields\r\n    if (data.name) {\r\n      elements.push(<h2 key={data.name}>{data.name}</h2>);\r\n    }\r\n    if (data.main.temp !== undefined) {\r\n      const temp = data.main.temp.toFixed(0);\r\n      elements.push(\r\n        <h1>\r\n          {temp} {units === \"metric\" ? \"°C\" : \"°F\"}\r\n        </h1>\r\n      );\r\n    }\r\n    if (data.weather[0].description) {\r\n      elements.push(<h3>{data.weather[0].description}.</h3>);\r\n    }\r\n\r\n    // additional info that might or might not be in the API response\r\n    if (data.clouds.all !== undefined) {\r\n      elements.push(<p>Clouds: {data.clouds.all}%</p>);\r\n    }\r\n    if (data.wind.speed !== undefined) {\r\n      elements.push(\r\n        <p>\r\n          Wind: {data.wind.speed} {units === \"metric\" ? \"m/s\" : \"mph\"}\r\n        </p>\r\n      );\r\n    }\r\n    if (data[\"rain.1h\"] !== undefined) {\r\n      elements.push(<p>Rain: {data[\"rain.1h\"]}</p>);\r\n    }\r\n    if (data[\"snow.1h\"] !== undefined) {\r\n      elements.push(<p>Snow: {data[\"snow.1h\"]}</p>);\r\n    }\r\n    if (data.sys.sunrise !== undefined) {\r\n      const time = new Date(data.sys.sunrise * 1000);\r\n      const timeStr = time.toLocaleTimeString();\r\n      elements.push(<p>Sunrise: {timeStr}</p>);\r\n    }\r\n    if (data.sys.sunset !== undefined) {\r\n      const time = new Date(data.sys.sunset * 1000);\r\n      const timeStr = time.toLocaleTimeString();\r\n      elements.push(<p>Sunset: {timeStr}</p>);\r\n    }\r\n    return elements;\r\n  };\r\n\r\n  if (props.data) {\r\n    const elements = buildDisplay(props.data, props.units);\r\n    return <div className=\"weather\">{elements}</div>;\r\n  }\r\n  return null;\r\n}\r\n\r\nexport default Weather;\r\n","import React from \"react\";\r\n\r\nfunction SearchError(props) {\r\n  if (props.searchError) {\r\n    return <p className=\"error\">Location not found.</p>;\r\n  }\r\n  return <p className=\"error invisible\">Location found.</p>;\r\n}\r\n\r\nfunction Search(props) {\r\n  return (\r\n    <div className=\"city-search\">\r\n      <form onSubmit={props.handleSubmit}>\r\n        <div className=\"search-bar\">\r\n          <input\r\n            className=\"search-left\"\r\n            placeholder=\"Search City\"\r\n            name=\"city\"\r\n            type=\"text\"\r\n            value={props.searchTerm}\r\n            onChange={props.handleChange}\r\n          />\r\n          <input\r\n            className=\"search-right\"\r\n            type=\"submit\"\r\n            name=\"search\"\r\n            value=\"Search\"\r\n            onChange={props.handleChange}\r\n          />\r\n        </div>\r\n        <SearchError searchError={props.searchError} />\r\n        <div className=\"units\" onChange={props.handleChange}>\r\n          <label className=\"radio-label\">\r\n            <input type=\"radio\" value=\"metric\" name=\"units\" defaultChecked />\r\n            Metric\r\n          </label>\r\n          <label className=\"radio-label\">\r\n            <input type=\"radio\" value=\"imperial\" name=\"units\" />\r\n            Imperial\r\n          </label>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Search;\r\n","import React from \"react\";\r\n\r\nfunction History(props) {\r\n  if (props.history.length === 0) {\r\n    return null;\r\n  }\r\n  return (\r\n    <div className=\"history\">\r\n      <h2>History</h2>\r\n      <ul>\r\n        {props.history.map((location) => (\r\n          <li\r\n            className=\"location\"\r\n            key={location}\r\n            onClick={props.handleHistoryClick}\r\n          >\r\n            {location}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default History;\r\n","import React, { useState, useEffect } from \"react\";\nimport Weather from \"./components/Weather\";\nimport Search from \"./components/Search\";\nimport History from \"./components/History\";\n\nfunction App() {\n  const API_KEY = process.env.REACT_APP_API_KEY;\n\n  // search fields\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [searchError, setSearchError] = useState(false);\n  const [searchUnits, setSearchUnits] = useState(\"metric\");\n  const [history, setHistory] = useState([]);\n  const historySize = 9;\n\n  // weather fields\n  const [units, setUnits] = useState(\"metric\");\n  const [data, setData] = useState(null);\n\n  // methods\n  const fetchWeatherData = async (city, units) => {\n    try {\n      const response = await fetch(\n        `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}&units=${units}`,\n        { mode: \"cors\" }\n      );\n      const json = await response.json();\n      if (json.cod === 200) {\n        setData(json);\n        setSearchError(false);\n        setUnits(units);\n        updateHistory(history, json.name);\n      } else {\n        setSearchError(true);\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const updateHistory = (history, newLocation) => {\n    let newHistory = [...history];\n    if (newHistory.includes(newLocation)) return;\n    if (newHistory.length >= historySize) {\n      newHistory.splice(historySize - 1, 1);\n    }\n    newHistory.unshift(newLocation);\n    setHistory(newHistory);\n    saveHistory(newHistory);\n  };\n\n  const saveHistory = (history) => {\n    localStorage.setItem(\"history\", JSON.stringify(history));\n  };\n\n  const loadHistory = () => {\n    if (localStorage.getItem(\"history\")) {\n      const localHistory = JSON.parse(localStorage.getItem(\"history\"));\n      setHistory(localHistory);\n    }\n  };\n\n  // load old history on start up\n  useEffect(() => {\n    loadHistory();\n  }, []);\n\n  // form controls\n  const handleChange = (event) => {\n    if (event.target.name === \"city\") setSearchTerm(event.target.value);\n    if (event.target.name === \"units\") setSearchUnits(event.target.value);\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    fetchWeatherData(searchTerm, searchUnits);\n  };\n\n  const handleHistoryClick = (event) => {\n    fetchWeatherData(event.target.innerText, searchUnits);\n  };\n\n  return (\n    <div className=\"app\">\n      <header>\n        <h1>Weather Now</h1>\n        <Search\n          handleChange={handleChange}\n          handleSubmit={handleSubmit}\n          searchError={searchError}\n          searchTerm={searchTerm}\n        />\n      </header>\n      <main className=\"results\">\n        <Weather data={data} units={units} />\n        <History history={history} handleHistoryClick={handleHistoryClick} />\n      </main>\n      <footer>\n        <a href=\"https://openweathermap.org/\">\n          Powered by Open Weather Map API\n        </a>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./reset.css\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}